// Code generated by goctl. DO NOT EDIT.
// Source: jobcron.proto

package server

import (
	"context"
	"job/internal/logic"
	"job/internal/svc"
	"job/pb"
)

type JobCronServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedJobCronServer
}

func NewJobCronServer(svcCtx *svc.ServiceContext) *JobCronServer {
	return &JobCronServer{
		svcCtx: svcCtx,
	}
}

// -----------------------job_record-----------------------
func (s *JobCronServer) CreateJobRecord(ctx context.Context, in *pb.CreateJobRecordReq) (*pb.CreateJobRecordResp, error) {
	l := logic.NewCreateJobRecordLogic(ctx, s.svcCtx)
	return l.CreateJobRecord(in)
}

func (s *JobCronServer) UpdateJobRecord(ctx context.Context, in *pb.UpdateJobRecordReq) (*pb.UpdateJobRecordResp, error) {
	l := logic.NewUpdateJobRecordLogic(ctx, s.svcCtx)
	return l.UpdateJobRecord(in)
}

func (s *JobCronServer) DeleteJobRecord(ctx context.Context, in *pb.DeleteJobRecordReq) (*pb.DeleteJobRecordResp, error) {
	l := logic.NewDeleteJobRecordLogic(ctx, s.svcCtx)
	return l.DeleteJobRecord(in)
}

func (s *JobCronServer) DetailJobRecord(ctx context.Context, in *pb.DetailJobRecordReq) (*pb.DetailJobRecordResp, error) {
	l := logic.NewDetailJobRecordLogic(ctx, s.svcCtx)
	return l.DetailJobRecord(in)
}

func (s *JobCronServer) PageJobRecord(ctx context.Context, in *pb.SearchJobRecordReq) (*pb.SearchJobRecordResp, error) {
	l := logic.NewPageJobRecordLogic(ctx, s.svcCtx)
	return l.PageJobRecord(in)
}

// -----------------------job_schedule-----------------------
func (s *JobCronServer) CreateJobSchedule(ctx context.Context, in *pb.CreateJobScheduleReq) (*pb.CreateJobScheduleResp, error) {
	l := logic.NewCreateJobScheduleLogic(ctx, s.svcCtx)
	return l.CreateJobSchedule(in)
}

func (s *JobCronServer) UpdateJobSchedule(ctx context.Context, in *pb.UpdateJobScheduleReq) (*pb.UpdateJobScheduleResp, error) {
	l := logic.NewUpdateJobScheduleLogic(ctx, s.svcCtx)
	return l.UpdateJobSchedule(in)
}

func (s *JobCronServer) DeleteJobSchedule(ctx context.Context, in *pb.DeleteJobScheduleReq) (*pb.DeleteJobScheduleResp, error) {
	l := logic.NewDeleteJobScheduleLogic(ctx, s.svcCtx)
	return l.DeleteJobSchedule(in)
}

func (s *JobCronServer) DetailJobSchedule(ctx context.Context, in *pb.DetailJobScheduleReq) (*pb.DetailJobScheduleResp, error) {
	l := logic.NewDetailJobScheduleLogic(ctx, s.svcCtx)
	return l.DetailJobSchedule(in)
}

func (s *JobCronServer) PageJobSchedule(ctx context.Context, in *pb.SearchJobScheduleReq) (*pb.SearchJobScheduleResp, error) {
	l := logic.NewPageJobScheduleLogic(ctx, s.svcCtx)
	return l.PageJobSchedule(in)
}

// 补偿任务，立即执行该key对应的任务
func (s *JobCronServer) JobCompensate(ctx context.Context, in *pb.JobCompensateReq) (*pb.JobCompensateResp, error) {
	l := logic.NewJobCompensateLogic(ctx, s.svcCtx)
	return l.JobCompensate(in)
}

// 强制重启job
func (s *JobCronServer) ForceRestartJob(ctx context.Context, in *pb.ForceRestartJobReq) (*pb.ForceRestartJobResp, error) {
	l := logic.NewForceRestartJobLogic(ctx, s.svcCtx)
	return l.ForceRestartJob(in)
}

// 操作Schedule对象，包括restart、stop、start调度
func (s *JobCronServer) OperaSchedule(ctx context.Context, in *pb.OperaScheduleReq) (*pb.OperaScheduleResp, error) {
	l := logic.NewOperaScheduleLogic(ctx, s.svcCtx)
	return l.OperaSchedule(in)
}

// 操作Schedule对象，包括restart、stop、start调度
func (s *JobCronServer) GetScheduleStatus(ctx context.Context, in *pb.ScheduleStatusReq) (*pb.ScheduleStatusResp, error) {
	l := logic.NewGetScheduleStatusLogic(ctx, s.svcCtx)
	return l.GetScheduleStatus(in)
}
