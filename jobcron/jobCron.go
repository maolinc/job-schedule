// Code generated by goctl. DO NOT EDIT.
// Source: jobcron.proto

package jobcron

import (
	"context"
	"job/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateJobRecordReq    = pb.CreateJobRecordReq
	CreateJobRecordResp   = pb.CreateJobRecordResp
	CreateJobScheduleReq  = pb.CreateJobScheduleReq
	CreateJobScheduleResp = pb.CreateJobScheduleResp
	DeleteJobRecordReq    = pb.DeleteJobRecordReq
	DeleteJobRecordResp   = pb.DeleteJobRecordResp
	DeleteJobScheduleReq  = pb.DeleteJobScheduleReq
	DeleteJobScheduleResp = pb.DeleteJobScheduleResp
	DetailJobRecordReq    = pb.DetailJobRecordReq
	DetailJobRecordResp   = pb.DetailJobRecordResp
	DetailJobScheduleReq  = pb.DetailJobScheduleReq
	DetailJobScheduleResp = pb.DetailJobScheduleResp
	ForceRestartJobReq    = pb.ForceRestartJobReq
	ForceRestartJobResp   = pb.ForceRestartJobResp
	IdReq                 = pb.IdReq
	IdsReq                = pb.IdsReq
	JobCompensateReq      = pb.JobCompensateReq
	JobCompensateResp     = pb.JobCompensateResp
	JobRecordView         = pb.JobRecordView
	JobScheduleView       = pb.JobScheduleView
	OperaScheduleReq      = pb.OperaScheduleReq
	OperaScheduleResp     = pb.OperaScheduleResp
	ResultStatus          = pb.ResultStatus
	ScheduleStatusReq     = pb.ScheduleStatusReq
	ScheduleStatusResp    = pb.ScheduleStatusResp
	SearchJobRecordReq    = pb.SearchJobRecordReq
	SearchJobRecordResp   = pb.SearchJobRecordResp
	SearchJobScheduleReq  = pb.SearchJobScheduleReq
	SearchJobScheduleResp = pb.SearchJobScheduleResp
	UpdateJobRecordReq    = pb.UpdateJobRecordReq
	UpdateJobRecordResp   = pb.UpdateJobRecordResp
	UpdateJobScheduleReq  = pb.UpdateJobScheduleReq
	UpdateJobScheduleResp = pb.UpdateJobScheduleResp

	JobCron interface {
		// -----------------------job_record-----------------------
		CreateJobRecord(ctx context.Context, in *CreateJobRecordReq, opts ...grpc.CallOption) (*CreateJobRecordResp, error)
		UpdateJobRecord(ctx context.Context, in *UpdateJobRecordReq, opts ...grpc.CallOption) (*UpdateJobRecordResp, error)
		DeleteJobRecord(ctx context.Context, in *DeleteJobRecordReq, opts ...grpc.CallOption) (*DeleteJobRecordResp, error)
		DetailJobRecord(ctx context.Context, in *DetailJobRecordReq, opts ...grpc.CallOption) (*DetailJobRecordResp, error)
		PageJobRecord(ctx context.Context, in *SearchJobRecordReq, opts ...grpc.CallOption) (*SearchJobRecordResp, error)
		// -----------------------job_schedule-----------------------
		CreateJobSchedule(ctx context.Context, in *CreateJobScheduleReq, opts ...grpc.CallOption) (*CreateJobScheduleResp, error)
		UpdateJobSchedule(ctx context.Context, in *UpdateJobScheduleReq, opts ...grpc.CallOption) (*UpdateJobScheduleResp, error)
		DeleteJobSchedule(ctx context.Context, in *DeleteJobScheduleReq, opts ...grpc.CallOption) (*DeleteJobScheduleResp, error)
		DetailJobSchedule(ctx context.Context, in *DetailJobScheduleReq, opts ...grpc.CallOption) (*DetailJobScheduleResp, error)
		PageJobSchedule(ctx context.Context, in *SearchJobScheduleReq, opts ...grpc.CallOption) (*SearchJobScheduleResp, error)
		// 补偿任务，立即执行该key对应的任务
		JobCompensate(ctx context.Context, in *JobCompensateReq, opts ...grpc.CallOption) (*JobCompensateResp, error)
		// 强制重启job
		ForceRestartJob(ctx context.Context, in *ForceRestartJobReq, opts ...grpc.CallOption) (*ForceRestartJobResp, error)
		// 操作Schedule对象，包括restart、stop、start调度
		OperaSchedule(ctx context.Context, in *OperaScheduleReq, opts ...grpc.CallOption) (*OperaScheduleResp, error)
		// 操作Schedule对象，包括restart、stop、start调度
		GetScheduleStatus(ctx context.Context, in *ScheduleStatusReq, opts ...grpc.CallOption) (*ScheduleStatusResp, error)
	}

	defaultJobCron struct {
		cli zrpc.Client
	}
)

func NewJobCron(cli zrpc.Client) JobCron {
	return &defaultJobCron{
		cli: cli,
	}
}

// -----------------------job_record-----------------------
func (m *defaultJobCron) CreateJobRecord(ctx context.Context, in *CreateJobRecordReq, opts ...grpc.CallOption) (*CreateJobRecordResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.CreateJobRecord(ctx, in, opts...)
}

func (m *defaultJobCron) UpdateJobRecord(ctx context.Context, in *UpdateJobRecordReq, opts ...grpc.CallOption) (*UpdateJobRecordResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.UpdateJobRecord(ctx, in, opts...)
}

func (m *defaultJobCron) DeleteJobRecord(ctx context.Context, in *DeleteJobRecordReq, opts ...grpc.CallOption) (*DeleteJobRecordResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.DeleteJobRecord(ctx, in, opts...)
}

func (m *defaultJobCron) DetailJobRecord(ctx context.Context, in *DetailJobRecordReq, opts ...grpc.CallOption) (*DetailJobRecordResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.DetailJobRecord(ctx, in, opts...)
}

func (m *defaultJobCron) PageJobRecord(ctx context.Context, in *SearchJobRecordReq, opts ...grpc.CallOption) (*SearchJobRecordResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.PageJobRecord(ctx, in, opts...)
}

// -----------------------job_schedule-----------------------
func (m *defaultJobCron) CreateJobSchedule(ctx context.Context, in *CreateJobScheduleReq, opts ...grpc.CallOption) (*CreateJobScheduleResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.CreateJobSchedule(ctx, in, opts...)
}

func (m *defaultJobCron) UpdateJobSchedule(ctx context.Context, in *UpdateJobScheduleReq, opts ...grpc.CallOption) (*UpdateJobScheduleResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.UpdateJobSchedule(ctx, in, opts...)
}

func (m *defaultJobCron) DeleteJobSchedule(ctx context.Context, in *DeleteJobScheduleReq, opts ...grpc.CallOption) (*DeleteJobScheduleResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.DeleteJobSchedule(ctx, in, opts...)
}

func (m *defaultJobCron) DetailJobSchedule(ctx context.Context, in *DetailJobScheduleReq, opts ...grpc.CallOption) (*DetailJobScheduleResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.DetailJobSchedule(ctx, in, opts...)
}

func (m *defaultJobCron) PageJobSchedule(ctx context.Context, in *SearchJobScheduleReq, opts ...grpc.CallOption) (*SearchJobScheduleResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.PageJobSchedule(ctx, in, opts...)
}

// 补偿任务，立即执行该key对应的任务
func (m *defaultJobCron) JobCompensate(ctx context.Context, in *JobCompensateReq, opts ...grpc.CallOption) (*JobCompensateResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.JobCompensate(ctx, in, opts...)
}

// 强制重启job
func (m *defaultJobCron) ForceRestartJob(ctx context.Context, in *ForceRestartJobReq, opts ...grpc.CallOption) (*ForceRestartJobResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.ForceRestartJob(ctx, in, opts...)
}

// 操作Schedule对象，包括restart、stop、start调度
func (m *defaultJobCron) OperaSchedule(ctx context.Context, in *OperaScheduleReq, opts ...grpc.CallOption) (*OperaScheduleResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.OperaSchedule(ctx, in, opts...)
}

// 操作Schedule对象，包括restart、stop、start调度
func (m *defaultJobCron) GetScheduleStatus(ctx context.Context, in *ScheduleStatusReq, opts ...grpc.CallOption) (*ScheduleStatusResp, error) {
	client := pb.NewJobCronClient(m.cli.Conn())
	return client.GetScheduleStatus(ctx, in, opts...)
}
