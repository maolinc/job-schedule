// goctl rpc protoc job.proto --go_out=. --go-grpc_out=. --zrpc_out=. -m=false --style=goZero
// 生成http： protoc --include_imports --proto_path=. --descriptor_set_out=jobcron.pb jobcron.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: jobcron.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -----------------------通用message-----------------------
type IdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{0}
}

func (x *IdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids int64 `protobuf:"varint,1,opt,name=ids,proto3" json:"ids,omitempty"` //ids
}

func (x *IdsReq) Reset() {
	*x = IdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsReq) ProtoMessage() {}

func (x *IdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsReq.ProtoReflect.Descriptor instead.
func (*IdsReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{1}
}

func (x *IdsReq) GetIds() int64 {
	if x != nil {
		return x.Ids
	}
	return 0
}

type ResultStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ResultStatus) Reset() {
	*x = ResultStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultStatus) ProtoMessage() {}

func (x *ResultStatus) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultStatus.ProtoReflect.Descriptor instead.
func (*ResultStatus) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{2}
}

func (x *ResultStatus) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResultStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// -----------------------job_record-----------------------
type JobRecordView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //
	JobId     int64  `protobuf:"varint,2,opt,name=jobId,proto3" json:"jobId,omitempty"`         //任务id
	StartTime int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"` //开始时间
	EndTime   int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`     //结束时间
	Result    string `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`        //执行结果完整信息json格式
	Status    string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`        //结果状态，ok | error
	UseMilli  int64  `protobuf:"varint,7,opt,name=useMilli,proto3" json:"useMilli,omitempty"`   // 耗时（毫秒）
	ExecType  string `protobuf:"bytes,8,opt,name=execType,proto3" json:"execType,omitempty"`
}

func (x *JobRecordView) Reset() {
	*x = JobRecordView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRecordView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRecordView) ProtoMessage() {}

func (x *JobRecordView) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRecordView.ProtoReflect.Descriptor instead.
func (*JobRecordView) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{3}
}

func (x *JobRecordView) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JobRecordView) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *JobRecordView) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *JobRecordView) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *JobRecordView) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *JobRecordView) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *JobRecordView) GetUseMilli() int64 {
	if x != nil {
		return x.UseMilli
	}
	return 0
}

func (x *JobRecordView) GetExecType() string {
	if x != nil {
		return x.ExecType
	}
	return ""
}

type CreateJobRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //
	JobId     int64  `protobuf:"varint,2,opt,name=jobId,proto3" json:"jobId,omitempty"`         //任务id
	StartTime int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"` //开始时间
	EndTime   int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`     //结束时间
	Result    string `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`        //执行结果完整信息json格式
	Status    string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`        //结果状态，ok | error
}

func (x *CreateJobRecordReq) Reset() {
	*x = CreateJobRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobRecordReq) ProtoMessage() {}

func (x *CreateJobRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobRecordReq.ProtoReflect.Descriptor instead.
func (*CreateJobRecordReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{4}
}

func (x *CreateJobRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateJobRecordReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *CreateJobRecordReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CreateJobRecordReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CreateJobRecordReq) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CreateJobRecordReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CreateJobRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,1,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
}

func (x *CreateJobRecordResp) Reset() {
	*x = CreateJobRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobRecordResp) ProtoMessage() {}

func (x *CreateJobRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobRecordResp.ProtoReflect.Descriptor instead.
func (*CreateJobRecordResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{5}
}

func (x *CreateJobRecordResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

type UpdateJobRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //
	JobId     int64  `protobuf:"varint,2,opt,name=jobId,proto3" json:"jobId,omitempty"`         //任务id
	StartTime int64  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"` //开始时间
	EndTime   int64  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`     //结束时间
	Result    string `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`        //执行结果完整信息json格式
	Status    string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`        //结果状态，ok | error
}

func (x *UpdateJobRecordReq) Reset() {
	*x = UpdateJobRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobRecordReq) ProtoMessage() {}

func (x *UpdateJobRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobRecordReq.ProtoReflect.Descriptor instead.
func (*UpdateJobRecordReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateJobRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateJobRecordReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *UpdateJobRecordReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UpdateJobRecordReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UpdateJobRecordReq) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *UpdateJobRecordReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateJobRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,1,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
}

func (x *UpdateJobRecordResp) Reset() {
	*x = UpdateJobRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobRecordResp) ProtoMessage() {}

func (x *UpdateJobRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobRecordResp.ProtoReflect.Descriptor instead.
func (*UpdateJobRecordResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateJobRecordResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

type DeleteJobRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //
}

func (x *DeleteJobRecordReq) Reset() {
	*x = DeleteJobRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRecordReq) ProtoMessage() {}

func (x *DeleteJobRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRecordReq.ProtoReflect.Descriptor instead.
func (*DeleteJobRecordReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteJobRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteJobRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,1,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
}

func (x *DeleteJobRecordResp) Reset() {
	*x = DeleteJobRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRecordResp) ProtoMessage() {}

func (x *DeleteJobRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRecordResp.ProtoReflect.Descriptor instead.
func (*DeleteJobRecordResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteJobRecordResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

type DetailJobRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //
}

func (x *DetailJobRecordReq) Reset() {
	*x = DetailJobRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailJobRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailJobRecordReq) ProtoMessage() {}

func (x *DetailJobRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailJobRecordReq.ProtoReflect.Descriptor instead.
func (*DetailJobRecordReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{10}
}

func (x *DetailJobRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DetailJobRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,8,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
	Id           int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //
	JobId        int64         `protobuf:"varint,2,opt,name=jobId,proto3" json:"jobId,omitempty"`         //任务id
	StartTime    int64         `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"` //开始时间
	EndTime      int64         `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`     //结束时间
	Result       string        `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`        //执行结果完整信息json格式
	Status       string        `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`        //结果状态，ok | error
	UseMilli     int64         `protobuf:"varint,7,opt,name=useMilli,proto3" json:"useMilli,omitempty"`   // 耗时（毫秒）
}

func (x *DetailJobRecordResp) Reset() {
	*x = DetailJobRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailJobRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailJobRecordResp) ProtoMessage() {}

func (x *DetailJobRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailJobRecordResp.ProtoReflect.Descriptor instead.
func (*DetailJobRecordResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{11}
}

func (x *DetailJobRecordResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

func (x *DetailJobRecordResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DetailJobRecordResp) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *DetailJobRecordResp) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DetailJobRecordResp) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DetailJobRecordResp) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *DetailJobRecordResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DetailJobRecordResp) GetUseMilli() int64 {
	if x != nil {
		return x.UseMilli
	}
	return 0
}

type SearchJobRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor      int64    `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`           // 分页游标
	CursorAsc   bool     `protobuf:"varint,2,opt,name=cursorAsc,proto3" json:"cursorAsc,omitempty"`     // 游标分页时方向 true:asc  false:desc
	PageSize    int64    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`       // 每页条数
	PageCurrent int64    `protobuf:"varint,4,opt,name=pageCurrent,proto3" json:"pageCurrent,omitempty"` // 当前页
	OrderSort   []string `protobuf:"bytes,5,rep,name=orderSort,proto3" json:"orderSort,omitempty"`      // 排序 eg： ["create_time asc", "id desc"]
	SearchPlus  string   `protobuf:"bytes,6,opt,name=searchPlus,proto3" json:"searchPlus,omitempty"`    // 加强版搜索参数
	Id          int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`                   //
	JobId       int64    `protobuf:"varint,9,opt,name=jobId,proto3" json:"jobId,omitempty"`             //任务id
	StartTime   int64    `protobuf:"varint,10,opt,name=startTime,proto3" json:"startTime,omitempty"`    //开始时间
	EndTime     int64    `protobuf:"varint,11,opt,name=endTime,proto3" json:"endTime,omitempty"`        //结束时间
	Result      string   `protobuf:"bytes,12,opt,name=result,proto3" json:"result,omitempty"`           //执行结果完整信息json格式
	Status      string   `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`           //结果状态，ok | error
	UseMilli    int64    `protobuf:"varint,14,opt,name=useMilli,proto3" json:"useMilli,omitempty"`      // 耗时（毫秒）
	ExecType    string   `protobuf:"bytes,15,opt,name=execType,proto3" json:"execType,omitempty"`
}

func (x *SearchJobRecordReq) Reset() {
	*x = SearchJobRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchJobRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchJobRecordReq) ProtoMessage() {}

func (x *SearchJobRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchJobRecordReq.ProtoReflect.Descriptor instead.
func (*SearchJobRecordReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{12}
}

func (x *SearchJobRecordReq) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *SearchJobRecordReq) GetCursorAsc() bool {
	if x != nil {
		return x.CursorAsc
	}
	return false
}

func (x *SearchJobRecordReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchJobRecordReq) GetPageCurrent() int64 {
	if x != nil {
		return x.PageCurrent
	}
	return 0
}

func (x *SearchJobRecordReq) GetOrderSort() []string {
	if x != nil {
		return x.OrderSort
	}
	return nil
}

func (x *SearchJobRecordReq) GetSearchPlus() string {
	if x != nil {
		return x.SearchPlus
	}
	return ""
}

func (x *SearchJobRecordReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchJobRecordReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *SearchJobRecordReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SearchJobRecordReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SearchJobRecordReq) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SearchJobRecordReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchJobRecordReq) GetUseMilli() int64 {
	if x != nil {
		return x.UseMilli
	}
	return 0
}

func (x *SearchJobRecordReq) GetExecType() string {
	if x != nil {
		return x.ExecType
	}
	return ""
}

type SearchJobRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus    `protobuf:"bytes,8,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
	Total        int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageCurrent  int64            `protobuf:"varint,2,opt,name=pageCurrent,proto3" json:"pageCurrent,omitempty"`
	PageSize     int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageTotal    int64            `protobuf:"varint,4,opt,name=pageTotal,proto3" json:"pageTotal,omitempty"`
	LastCursor   int64            `protobuf:"varint,5,opt,name=lastCursor,proto3" json:"lastCursor,omitempty"`
	List         []*JobRecordView `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"` // 列表
}

func (x *SearchJobRecordResp) Reset() {
	*x = SearchJobRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchJobRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchJobRecordResp) ProtoMessage() {}

func (x *SearchJobRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchJobRecordResp.ProtoReflect.Descriptor instead.
func (*SearchJobRecordResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{13}
}

func (x *SearchJobRecordResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

func (x *SearchJobRecordResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchJobRecordResp) GetPageCurrent() int64 {
	if x != nil {
		return x.PageCurrent
	}
	return 0
}

func (x *SearchJobRecordResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchJobRecordResp) GetPageTotal() int64 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *SearchJobRecordResp) GetLastCursor() int64 {
	if x != nil {
		return x.LastCursor
	}
	return 0
}

func (x *SearchJobRecordResp) GetList() []*JobRecordView {
	if x != nil {
		return x.List
	}
	return nil
}

// -----------------------job_schedule-----------------------
type JobScheduleView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //
	JobName      string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`            //任务名称
	Des          string `protobuf:"bytes,3,opt,name=des,proto3" json:"des,omitempty"`                    //描述
	Cron         string `protobuf:"bytes,4,opt,name=cron,proto3" json:"cron,omitempty"`                  //调度时间，cron表达式
	ExecuteCount int64  `protobuf:"varint,5,opt,name=executeCount,proto3" json:"executeCount,omitempty"` //
	FailCount    int64  `protobuf:"varint,6,opt,name=failCount,proto3" json:"failCount,omitempty"`       //失败次数
	NowStatus    string `protobuf:"bytes,7,opt,name=nowStatus,proto3" json:"nowStatus,omitempty"`        //当前状态，wait | readly | running
	JobStatus    string `protobuf:"bytes,8,opt,name=jobStatus,proto3" json:"jobStatus,omitempty"`        //任务转态, stop不加入调度 | enable加入调度中
	CreateTime   int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`     //
	DeleteFlag   int64  `protobuf:"varint,10,opt,name=deleteFlag,proto3" json:"deleteFlag,omitempty"`    //
	UpdateTime   int64  `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`    //
	Parallel     string `protobuf:"bytes,12,opt,name=parallel,proto3" json:"parallel,omitempty"`         //是否允许并发执行，allow | reject
	Key          string `protobuf:"bytes,13,opt,name=key,proto3" json:"key,omitempty"`                   //与程序中的任务key一致，唯一
	Lock         int64  `protobuf:"varint,14,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (x *JobScheduleView) Reset() {
	*x = JobScheduleView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobScheduleView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobScheduleView) ProtoMessage() {}

func (x *JobScheduleView) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobScheduleView.ProtoReflect.Descriptor instead.
func (*JobScheduleView) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{14}
}

func (x *JobScheduleView) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JobScheduleView) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *JobScheduleView) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *JobScheduleView) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *JobScheduleView) GetExecuteCount() int64 {
	if x != nil {
		return x.ExecuteCount
	}
	return 0
}

func (x *JobScheduleView) GetFailCount() int64 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

func (x *JobScheduleView) GetNowStatus() string {
	if x != nil {
		return x.NowStatus
	}
	return ""
}

func (x *JobScheduleView) GetJobStatus() string {
	if x != nil {
		return x.JobStatus
	}
	return ""
}

func (x *JobScheduleView) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *JobScheduleView) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *JobScheduleView) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *JobScheduleView) GetParallel() string {
	if x != nil {
		return x.Parallel
	}
	return ""
}

func (x *JobScheduleView) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JobScheduleView) GetLock() int64 {
	if x != nil {
		return x.Lock
	}
	return 0
}

type CreateJobScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //
	JobName      string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`            //任务名称
	Des          string `protobuf:"bytes,3,opt,name=des,proto3" json:"des,omitempty"`                    //描述
	Cron         string `protobuf:"bytes,4,opt,name=cron,proto3" json:"cron,omitempty"`                  //调度时间，cron表达式
	ExecuteCount int64  `protobuf:"varint,5,opt,name=executeCount,proto3" json:"executeCount,omitempty"` //
	FailCount    int64  `protobuf:"varint,6,opt,name=failCount,proto3" json:"failCount,omitempty"`       //失败次数
	NowStatus    string `protobuf:"bytes,7,opt,name=nowStatus,proto3" json:"nowStatus,omitempty"`        //当前状态，wait | readly | running
	JobStatus    string `protobuf:"bytes,8,opt,name=jobStatus,proto3" json:"jobStatus,omitempty"`        //任务转态, stop不加入调度 | enable加入调度中
	CreateTime   int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`     //
	DeleteFlag   int64  `protobuf:"varint,10,opt,name=deleteFlag,proto3" json:"deleteFlag,omitempty"`    //
	UpdateTime   int64  `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`    //
	Parallel     string `protobuf:"bytes,12,opt,name=parallel,proto3" json:"parallel,omitempty"`         //是否允许并发执行，allow | reject
	Key          string `protobuf:"bytes,13,opt,name=key,proto3" json:"key,omitempty"`                   //与程序中的任务key一致，唯一
}

func (x *CreateJobScheduleReq) Reset() {
	*x = CreateJobScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobScheduleReq) ProtoMessage() {}

func (x *CreateJobScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobScheduleReq.ProtoReflect.Descriptor instead.
func (*CreateJobScheduleReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{15}
}

func (x *CreateJobScheduleReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateJobScheduleReq) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *CreateJobScheduleReq) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *CreateJobScheduleReq) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *CreateJobScheduleReq) GetExecuteCount() int64 {
	if x != nil {
		return x.ExecuteCount
	}
	return 0
}

func (x *CreateJobScheduleReq) GetFailCount() int64 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

func (x *CreateJobScheduleReq) GetNowStatus() string {
	if x != nil {
		return x.NowStatus
	}
	return ""
}

func (x *CreateJobScheduleReq) GetJobStatus() string {
	if x != nil {
		return x.JobStatus
	}
	return ""
}

func (x *CreateJobScheduleReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateJobScheduleReq) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *CreateJobScheduleReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *CreateJobScheduleReq) GetParallel() string {
	if x != nil {
		return x.Parallel
	}
	return ""
}

func (x *CreateJobScheduleReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CreateJobScheduleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,1,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
}

func (x *CreateJobScheduleResp) Reset() {
	*x = CreateJobScheduleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobScheduleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobScheduleResp) ProtoMessage() {}

func (x *CreateJobScheduleResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobScheduleResp.ProtoReflect.Descriptor instead.
func (*CreateJobScheduleResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{16}
}

func (x *CreateJobScheduleResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

type UpdateJobScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //
	JobName      string `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`            //任务名称
	Des          string `protobuf:"bytes,3,opt,name=des,proto3" json:"des,omitempty"`                    //描述
	Cron         string `protobuf:"bytes,4,opt,name=cron,proto3" json:"cron,omitempty"`                  //调度时间，cron表达式
	ExecuteCount int64  `protobuf:"varint,5,opt,name=executeCount,proto3" json:"executeCount,omitempty"` //
	FailCount    int64  `protobuf:"varint,6,opt,name=failCount,proto3" json:"failCount,omitempty"`       //失败次数
	NowStatus    string `protobuf:"bytes,7,opt,name=nowStatus,proto3" json:"nowStatus,omitempty"`        //当前状态，wait | readly | running
	JobStatus    string `protobuf:"bytes,8,opt,name=jobStatus,proto3" json:"jobStatus,omitempty"`        //任务转态, stop不加入调度 | enable加入调度中
	CreateTime   int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`     //
	DeleteFlag   int64  `protobuf:"varint,10,opt,name=deleteFlag,proto3" json:"deleteFlag,omitempty"`    //
	UpdateTime   int64  `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`    //
	Parallel     string `protobuf:"bytes,12,opt,name=parallel,proto3" json:"parallel,omitempty"`         //是否允许并发执行，allow | reject
	Key          string `protobuf:"bytes,13,opt,name=key,proto3" json:"key,omitempty"`                   //与程序中的任务key一致，唯一
}

func (x *UpdateJobScheduleReq) Reset() {
	*x = UpdateJobScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobScheduleReq) ProtoMessage() {}

func (x *UpdateJobScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobScheduleReq.ProtoReflect.Descriptor instead.
func (*UpdateJobScheduleReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateJobScheduleReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateJobScheduleReq) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *UpdateJobScheduleReq) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *UpdateJobScheduleReq) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *UpdateJobScheduleReq) GetExecuteCount() int64 {
	if x != nil {
		return x.ExecuteCount
	}
	return 0
}

func (x *UpdateJobScheduleReq) GetFailCount() int64 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

func (x *UpdateJobScheduleReq) GetNowStatus() string {
	if x != nil {
		return x.NowStatus
	}
	return ""
}

func (x *UpdateJobScheduleReq) GetJobStatus() string {
	if x != nil {
		return x.JobStatus
	}
	return ""
}

func (x *UpdateJobScheduleReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpdateJobScheduleReq) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *UpdateJobScheduleReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpdateJobScheduleReq) GetParallel() string {
	if x != nil {
		return x.Parallel
	}
	return ""
}

func (x *UpdateJobScheduleReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type UpdateJobScheduleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,1,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
}

func (x *UpdateJobScheduleResp) Reset() {
	*x = UpdateJobScheduleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobScheduleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobScheduleResp) ProtoMessage() {}

func (x *UpdateJobScheduleResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobScheduleResp.ProtoReflect.Descriptor instead.
func (*UpdateJobScheduleResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateJobScheduleResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

type DeleteJobScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //
}

func (x *DeleteJobScheduleReq) Reset() {
	*x = DeleteJobScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobScheduleReq) ProtoMessage() {}

func (x *DeleteJobScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobScheduleReq.ProtoReflect.Descriptor instead.
func (*DeleteJobScheduleReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteJobScheduleReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteJobScheduleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,1,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
}

func (x *DeleteJobScheduleResp) Reset() {
	*x = DeleteJobScheduleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobScheduleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobScheduleResp) ProtoMessage() {}

func (x *DeleteJobScheduleResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobScheduleResp.ProtoReflect.Descriptor instead.
func (*DeleteJobScheduleResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteJobScheduleResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

type DetailJobScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //
}

func (x *DetailJobScheduleReq) Reset() {
	*x = DetailJobScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailJobScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailJobScheduleReq) ProtoMessage() {}

func (x *DetailJobScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailJobScheduleReq.ProtoReflect.Descriptor instead.
func (*DetailJobScheduleReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{21}
}

func (x *DetailJobScheduleReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DetailJobScheduleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,14,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
	Id           int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                     //
	JobName      string        `protobuf:"bytes,2,opt,name=jobName,proto3" json:"jobName,omitempty"`            //任务名称
	Des          string        `protobuf:"bytes,3,opt,name=des,proto3" json:"des,omitempty"`                    //描述
	Cron         string        `protobuf:"bytes,4,opt,name=cron,proto3" json:"cron,omitempty"`                  //调度时间，cron表达式
	ExecuteCount int64         `protobuf:"varint,5,opt,name=executeCount,proto3" json:"executeCount,omitempty"` //
	FailCount    int64         `protobuf:"varint,6,opt,name=failCount,proto3" json:"failCount,omitempty"`       //失败次数
	NowStatus    string        `protobuf:"bytes,7,opt,name=nowStatus,proto3" json:"nowStatus,omitempty"`        //当前状态，wait | readly | running
	JobStatus    string        `protobuf:"bytes,8,opt,name=jobStatus,proto3" json:"jobStatus,omitempty"`        //任务转态, stop不加入调度 | enable加入调度中
	CreateTime   int64         `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`     //
	DeleteFlag   int64         `protobuf:"varint,10,opt,name=deleteFlag,proto3" json:"deleteFlag,omitempty"`    //
	UpdateTime   int64         `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`    //
	Parallel     string        `protobuf:"bytes,12,opt,name=parallel,proto3" json:"parallel,omitempty"`         //是否允许并发执行，allow | reject
	Key          string        `protobuf:"bytes,13,opt,name=key,proto3" json:"key,omitempty"`                   //与程序中的任务key一致，唯一
	Lock         int64         `protobuf:"varint,15,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (x *DetailJobScheduleResp) Reset() {
	*x = DetailJobScheduleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailJobScheduleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailJobScheduleResp) ProtoMessage() {}

func (x *DetailJobScheduleResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailJobScheduleResp.ProtoReflect.Descriptor instead.
func (*DetailJobScheduleResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{22}
}

func (x *DetailJobScheduleResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

func (x *DetailJobScheduleResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DetailJobScheduleResp) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *DetailJobScheduleResp) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *DetailJobScheduleResp) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *DetailJobScheduleResp) GetExecuteCount() int64 {
	if x != nil {
		return x.ExecuteCount
	}
	return 0
}

func (x *DetailJobScheduleResp) GetFailCount() int64 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

func (x *DetailJobScheduleResp) GetNowStatus() string {
	if x != nil {
		return x.NowStatus
	}
	return ""
}

func (x *DetailJobScheduleResp) GetJobStatus() string {
	if x != nil {
		return x.JobStatus
	}
	return ""
}

func (x *DetailJobScheduleResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DetailJobScheduleResp) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *DetailJobScheduleResp) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *DetailJobScheduleResp) GetParallel() string {
	if x != nil {
		return x.Parallel
	}
	return ""
}

func (x *DetailJobScheduleResp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DetailJobScheduleResp) GetLock() int64 {
	if x != nil {
		return x.Lock
	}
	return 0
}

type SearchJobScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor       int64    `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`              // 分页游标
	CursorAsc    bool     `protobuf:"varint,2,opt,name=cursorAsc,proto3" json:"cursorAsc,omitempty"`        // 游标分页时方向 true:asc  false:desc
	PageSize     int64    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`          // 每页条数
	PageCurrent  int64    `protobuf:"varint,4,opt,name=pageCurrent,proto3" json:"pageCurrent,omitempty"`    // 当前页
	OrderSort    []string `protobuf:"bytes,5,rep,name=orderSort,proto3" json:"orderSort,omitempty"`         // 排序 eg： ["create_time asc", "id desc"]
	SearchPlus   string   `protobuf:"bytes,6,opt,name=searchPlus,proto3" json:"searchPlus,omitempty"`       // 加强版搜索参数
	Id           int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`                      //
	JobName      string   `protobuf:"bytes,9,opt,name=jobName,proto3" json:"jobName,omitempty"`             //任务名称
	Des          string   `protobuf:"bytes,10,opt,name=des,proto3" json:"des,omitempty"`                    //描述
	Cron         string   `protobuf:"bytes,11,opt,name=cron,proto3" json:"cron,omitempty"`                  //调度时间，cron表达式
	ExecuteCount int64    `protobuf:"varint,12,opt,name=executeCount,proto3" json:"executeCount,omitempty"` //
	FailCount    int64    `protobuf:"varint,13,opt,name=failCount,proto3" json:"failCount,omitempty"`       //失败次数
	NowStatus    string   `protobuf:"bytes,14,opt,name=nowStatus,proto3" json:"nowStatus,omitempty"`        //当前状态，wait | readly | running
	JobStatus    string   `protobuf:"bytes,15,opt,name=jobStatus,proto3" json:"jobStatus,omitempty"`        //任务转态, stop不加入调度 | enable加入调度中
	CreateTime   int64    `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`     //
	DeleteFlag   int64    `protobuf:"varint,17,opt,name=deleteFlag,proto3" json:"deleteFlag,omitempty"`     //
	UpdateTime   int64    `protobuf:"varint,18,opt,name=updateTime,proto3" json:"updateTime,omitempty"`     //
	Parallel     string   `protobuf:"bytes,19,opt,name=parallel,proto3" json:"parallel,omitempty"`          //是否允许并发执行，allow | reject
	Key          string   `protobuf:"bytes,20,opt,name=key,proto3" json:"key,omitempty"`                    //与程序中的任务key一致，唯一
}

func (x *SearchJobScheduleReq) Reset() {
	*x = SearchJobScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchJobScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchJobScheduleReq) ProtoMessage() {}

func (x *SearchJobScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchJobScheduleReq.ProtoReflect.Descriptor instead.
func (*SearchJobScheduleReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{23}
}

func (x *SearchJobScheduleReq) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *SearchJobScheduleReq) GetCursorAsc() bool {
	if x != nil {
		return x.CursorAsc
	}
	return false
}

func (x *SearchJobScheduleReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchJobScheduleReq) GetPageCurrent() int64 {
	if x != nil {
		return x.PageCurrent
	}
	return 0
}

func (x *SearchJobScheduleReq) GetOrderSort() []string {
	if x != nil {
		return x.OrderSort
	}
	return nil
}

func (x *SearchJobScheduleReq) GetSearchPlus() string {
	if x != nil {
		return x.SearchPlus
	}
	return ""
}

func (x *SearchJobScheduleReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchJobScheduleReq) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SearchJobScheduleReq) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

func (x *SearchJobScheduleReq) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *SearchJobScheduleReq) GetExecuteCount() int64 {
	if x != nil {
		return x.ExecuteCount
	}
	return 0
}

func (x *SearchJobScheduleReq) GetFailCount() int64 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

func (x *SearchJobScheduleReq) GetNowStatus() string {
	if x != nil {
		return x.NowStatus
	}
	return ""
}

func (x *SearchJobScheduleReq) GetJobStatus() string {
	if x != nil {
		return x.JobStatus
	}
	return ""
}

func (x *SearchJobScheduleReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SearchJobScheduleReq) GetDeleteFlag() int64 {
	if x != nil {
		return x.DeleteFlag
	}
	return 0
}

func (x *SearchJobScheduleReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SearchJobScheduleReq) GetParallel() string {
	if x != nil {
		return x.Parallel
	}
	return ""
}

func (x *SearchJobScheduleReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SearchJobScheduleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus      `protobuf:"bytes,8,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
	Total        int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageCurrent  int64              `protobuf:"varint,2,opt,name=pageCurrent,proto3" json:"pageCurrent,omitempty"`
	PageSize     int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	PageTotal    int64              `protobuf:"varint,4,opt,name=pageTotal,proto3" json:"pageTotal,omitempty"`
	LastCursor   int64              `protobuf:"varint,5,opt,name=lastCursor,proto3" json:"lastCursor,omitempty"`
	List         []*JobScheduleView `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"` // 列表
}

func (x *SearchJobScheduleResp) Reset() {
	*x = SearchJobScheduleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchJobScheduleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchJobScheduleResp) ProtoMessage() {}

func (x *SearchJobScheduleResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchJobScheduleResp.ProtoReflect.Descriptor instead.
func (*SearchJobScheduleResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{24}
}

func (x *SearchJobScheduleResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

func (x *SearchJobScheduleResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchJobScheduleResp) GetPageCurrent() int64 {
	if x != nil {
		return x.PageCurrent
	}
	return 0
}

func (x *SearchJobScheduleResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchJobScheduleResp) GetPageTotal() int64 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *SearchJobScheduleResp) GetLastCursor() int64 {
	if x != nil {
		return x.LastCursor
	}
	return 0
}

func (x *SearchJobScheduleResp) GetList() []*JobScheduleView {
	if x != nil {
		return x.List
	}
	return nil
}

type JobCompensateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                // 任务key必填
	Params     string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`          //参数json字符串，选填
	Background bool   `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"` //是否后台运行， true后台运行非阻塞， false阻塞
}

func (x *JobCompensateReq) Reset() {
	*x = JobCompensateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCompensateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCompensateReq) ProtoMessage() {}

func (x *JobCompensateReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCompensateReq.ProtoReflect.Descriptor instead.
func (*JobCompensateReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{25}
}

func (x *JobCompensateReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JobCompensateReq) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *JobCompensateReq) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

type JobCompensateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,2,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
	Result       string        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *JobCompensateResp) Reset() {
	*x = JobCompensateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCompensateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCompensateResp) ProtoMessage() {}

func (x *JobCompensateResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCompensateResp.ProtoReflect.Descriptor instead.
func (*JobCompensateResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{26}
}

func (x *JobCompensateResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

func (x *JobCompensateResp) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type ForceRestartJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ForceRestartJobReq) Reset() {
	*x = ForceRestartJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceRestartJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceRestartJobReq) ProtoMessage() {}

func (x *ForceRestartJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceRestartJobReq.ProtoReflect.Descriptor instead.
func (*ForceRestartJobReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{27}
}

func (x *ForceRestartJobReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ForceRestartJobReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ForceRestartJobResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,1,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
}

func (x *ForceRestartJobResp) Reset() {
	*x = ForceRestartJobResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceRestartJobResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceRestartJobResp) ProtoMessage() {}

func (x *ForceRestartJobResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceRestartJobResp.ProtoReflect.Descriptor instead.
func (*ForceRestartJobResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{28}
}

func (x *ForceRestartJobResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

type OperaScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"` //start | stop | restart
}

func (x *OperaScheduleReq) Reset() {
	*x = OperaScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperaScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperaScheduleReq) ProtoMessage() {}

func (x *OperaScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperaScheduleReq.ProtoReflect.Descriptor instead.
func (*OperaScheduleReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{29}
}

func (x *OperaScheduleReq) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type OperaScheduleResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,3,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
	Action       string        `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"` //start | stop | restart
	Status       string        `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // running | stop
}

func (x *OperaScheduleResp) Reset() {
	*x = OperaScheduleResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperaScheduleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperaScheduleResp) ProtoMessage() {}

func (x *OperaScheduleResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperaScheduleResp.ProtoReflect.Descriptor instead.
func (*OperaScheduleResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{30}
}

func (x *OperaScheduleResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

func (x *OperaScheduleResp) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *OperaScheduleResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ScheduleStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScheduleStatusReq) Reset() {
	*x = ScheduleStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleStatusReq) ProtoMessage() {}

func (x *ScheduleStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleStatusReq.ProtoReflect.Descriptor instead.
func (*ScheduleStatusReq) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{31}
}

type ScheduleStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultStatus *ResultStatus `protobuf:"bytes,1,opt,name=resultStatus,proto3" json:"resultStatus,omitempty"`
	Status       string        `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ScheduleStatusResp) Reset() {
	*x = ScheduleStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobcron_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleStatusResp) ProtoMessage() {}

func (x *ScheduleStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_jobcron_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleStatusResp.ProtoReflect.Descriptor instead.
func (*ScheduleStatusResp) Descriptor() ([]byte, []int) {
	return file_jobcron_proto_rawDescGZIP(), []int{32}
}

func (x *ScheduleStatusResp) GetResultStatus() *ResultStatus {
	if x != nil {
		return x.ResultStatus
	}
	return nil
}

func (x *ScheduleStatusResp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_jobcron_proto protoreflect.FileDescriptor

var file_jobcron_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x05, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x1a, 0x0a, 0x06, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f,
	0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa2, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62,
	0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x24, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x22, 0x8c, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x41, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x41, 0x73, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x8e, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xf2, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62,
	0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xf2, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x52, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc2, 0x03, 0x0a,
	0x15, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a,
	0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0xa4, 0x04, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x41, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x41, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x92, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a,
	0x10, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x66, 0x0a, 0x11, 0x4a,
	0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x36, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x13, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x11, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x22, 0x67,
	0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62,
	0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xf9, 0x0b, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x43,
	0x72, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x73, 0x0a,
	0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x6d, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e,
	0x2f, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x3a, 0x01,
	0x2a, 0x12, 0x79, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f,
	0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x1d, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x6a, 0x6f, 0x62, 0x63, 0x72,
	0x6f, 0x6e, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x6a,
	0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6a, 0x6f,
	0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x6a, 0x6f, 0x62, 0x63,
	0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x75, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x6a, 0x6f,
	0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x63,
	0x72, 0x6f, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4a,
	0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x6a, 0x6f, 0x62, 0x63, 0x72,
	0x6f, 0x6e, 0x2f, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x6a, 0x6f, 0x62, 0x63,
	0x72, 0x6f, 0x6e, 0x2f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4a, 0x6f, 0x62, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e,
	0x2f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6a, 0x6f, 0x62, 0x63, 0x72, 0x6f,
	0x6e, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_jobcron_proto_rawDescOnce sync.Once
	file_jobcron_proto_rawDescData = file_jobcron_proto_rawDesc
)

func file_jobcron_proto_rawDescGZIP() []byte {
	file_jobcron_proto_rawDescOnce.Do(func() {
		file_jobcron_proto_rawDescData = protoimpl.X.CompressGZIP(file_jobcron_proto_rawDescData)
	})
	return file_jobcron_proto_rawDescData
}

var file_jobcron_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_jobcron_proto_goTypes = []interface{}{
	(*IdReq)(nil),                 // 0: jobcron.IdReq
	(*IdsReq)(nil),                // 1: jobcron.IdsReq
	(*ResultStatus)(nil),          // 2: jobcron.ResultStatus
	(*JobRecordView)(nil),         // 3: jobcron.JobRecordView
	(*CreateJobRecordReq)(nil),    // 4: jobcron.CreateJobRecordReq
	(*CreateJobRecordResp)(nil),   // 5: jobcron.CreateJobRecordResp
	(*UpdateJobRecordReq)(nil),    // 6: jobcron.UpdateJobRecordReq
	(*UpdateJobRecordResp)(nil),   // 7: jobcron.UpdateJobRecordResp
	(*DeleteJobRecordReq)(nil),    // 8: jobcron.DeleteJobRecordReq
	(*DeleteJobRecordResp)(nil),   // 9: jobcron.DeleteJobRecordResp
	(*DetailJobRecordReq)(nil),    // 10: jobcron.DetailJobRecordReq
	(*DetailJobRecordResp)(nil),   // 11: jobcron.DetailJobRecordResp
	(*SearchJobRecordReq)(nil),    // 12: jobcron.SearchJobRecordReq
	(*SearchJobRecordResp)(nil),   // 13: jobcron.SearchJobRecordResp
	(*JobScheduleView)(nil),       // 14: jobcron.JobScheduleView
	(*CreateJobScheduleReq)(nil),  // 15: jobcron.CreateJobScheduleReq
	(*CreateJobScheduleResp)(nil), // 16: jobcron.CreateJobScheduleResp
	(*UpdateJobScheduleReq)(nil),  // 17: jobcron.UpdateJobScheduleReq
	(*UpdateJobScheduleResp)(nil), // 18: jobcron.UpdateJobScheduleResp
	(*DeleteJobScheduleReq)(nil),  // 19: jobcron.DeleteJobScheduleReq
	(*DeleteJobScheduleResp)(nil), // 20: jobcron.DeleteJobScheduleResp
	(*DetailJobScheduleReq)(nil),  // 21: jobcron.DetailJobScheduleReq
	(*DetailJobScheduleResp)(nil), // 22: jobcron.DetailJobScheduleResp
	(*SearchJobScheduleReq)(nil),  // 23: jobcron.SearchJobScheduleReq
	(*SearchJobScheduleResp)(nil), // 24: jobcron.SearchJobScheduleResp
	(*JobCompensateReq)(nil),      // 25: jobcron.JobCompensateReq
	(*JobCompensateResp)(nil),     // 26: jobcron.JobCompensateResp
	(*ForceRestartJobReq)(nil),    // 27: jobcron.ForceRestartJobReq
	(*ForceRestartJobResp)(nil),   // 28: jobcron.ForceRestartJobResp
	(*OperaScheduleReq)(nil),      // 29: jobcron.OperaScheduleReq
	(*OperaScheduleResp)(nil),     // 30: jobcron.OperaScheduleResp
	(*ScheduleStatusReq)(nil),     // 31: jobcron.ScheduleStatusReq
	(*ScheduleStatusResp)(nil),    // 32: jobcron.ScheduleStatusResp
}
var file_jobcron_proto_depIdxs = []int32{
	2,  // 0: jobcron.CreateJobRecordResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 1: jobcron.UpdateJobRecordResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 2: jobcron.DeleteJobRecordResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 3: jobcron.DetailJobRecordResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 4: jobcron.SearchJobRecordResp.resultStatus:type_name -> jobcron.ResultStatus
	3,  // 5: jobcron.SearchJobRecordResp.list:type_name -> jobcron.JobRecordView
	2,  // 6: jobcron.CreateJobScheduleResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 7: jobcron.UpdateJobScheduleResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 8: jobcron.DeleteJobScheduleResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 9: jobcron.DetailJobScheduleResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 10: jobcron.SearchJobScheduleResp.resultStatus:type_name -> jobcron.ResultStatus
	14, // 11: jobcron.SearchJobScheduleResp.list:type_name -> jobcron.JobScheduleView
	2,  // 12: jobcron.JobCompensateResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 13: jobcron.ForceRestartJobResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 14: jobcron.OperaScheduleResp.resultStatus:type_name -> jobcron.ResultStatus
	2,  // 15: jobcron.ScheduleStatusResp.resultStatus:type_name -> jobcron.ResultStatus
	4,  // 16: jobcron.JobCron.CreateJobRecord:input_type -> jobcron.CreateJobRecordReq
	6,  // 17: jobcron.JobCron.UpdateJobRecord:input_type -> jobcron.UpdateJobRecordReq
	8,  // 18: jobcron.JobCron.DeleteJobRecord:input_type -> jobcron.DeleteJobRecordReq
	10, // 19: jobcron.JobCron.DetailJobRecord:input_type -> jobcron.DetailJobRecordReq
	12, // 20: jobcron.JobCron.PageJobRecord:input_type -> jobcron.SearchJobRecordReq
	15, // 21: jobcron.JobCron.CreateJobSchedule:input_type -> jobcron.CreateJobScheduleReq
	17, // 22: jobcron.JobCron.UpdateJobSchedule:input_type -> jobcron.UpdateJobScheduleReq
	19, // 23: jobcron.JobCron.DeleteJobSchedule:input_type -> jobcron.DeleteJobScheduleReq
	21, // 24: jobcron.JobCron.DetailJobSchedule:input_type -> jobcron.DetailJobScheduleReq
	23, // 25: jobcron.JobCron.PageJobSchedule:input_type -> jobcron.SearchJobScheduleReq
	25, // 26: jobcron.JobCron.JobCompensate:input_type -> jobcron.JobCompensateReq
	27, // 27: jobcron.JobCron.ForceRestartJob:input_type -> jobcron.ForceRestartJobReq
	29, // 28: jobcron.JobCron.OperaSchedule:input_type -> jobcron.OperaScheduleReq
	31, // 29: jobcron.JobCron.GetScheduleStatus:input_type -> jobcron.ScheduleStatusReq
	5,  // 30: jobcron.JobCron.CreateJobRecord:output_type -> jobcron.CreateJobRecordResp
	7,  // 31: jobcron.JobCron.UpdateJobRecord:output_type -> jobcron.UpdateJobRecordResp
	9,  // 32: jobcron.JobCron.DeleteJobRecord:output_type -> jobcron.DeleteJobRecordResp
	11, // 33: jobcron.JobCron.DetailJobRecord:output_type -> jobcron.DetailJobRecordResp
	13, // 34: jobcron.JobCron.PageJobRecord:output_type -> jobcron.SearchJobRecordResp
	16, // 35: jobcron.JobCron.CreateJobSchedule:output_type -> jobcron.CreateJobScheduleResp
	18, // 36: jobcron.JobCron.UpdateJobSchedule:output_type -> jobcron.UpdateJobScheduleResp
	20, // 37: jobcron.JobCron.DeleteJobSchedule:output_type -> jobcron.DeleteJobScheduleResp
	22, // 38: jobcron.JobCron.DetailJobSchedule:output_type -> jobcron.DetailJobScheduleResp
	24, // 39: jobcron.JobCron.PageJobSchedule:output_type -> jobcron.SearchJobScheduleResp
	26, // 40: jobcron.JobCron.JobCompensate:output_type -> jobcron.JobCompensateResp
	28, // 41: jobcron.JobCron.ForceRestartJob:output_type -> jobcron.ForceRestartJobResp
	30, // 42: jobcron.JobCron.OperaSchedule:output_type -> jobcron.OperaScheduleResp
	32, // 43: jobcron.JobCron.GetScheduleStatus:output_type -> jobcron.ScheduleStatusResp
	30, // [30:44] is the sub-list for method output_type
	16, // [16:30] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_jobcron_proto_init() }
func file_jobcron_proto_init() {
	if File_jobcron_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jobcron_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRecordView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailJobRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailJobRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchJobRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchJobRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobScheduleView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobScheduleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobScheduleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobScheduleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailJobScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailJobScheduleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchJobScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchJobScheduleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCompensateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCompensateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceRestartJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceRestartJobResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperaScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperaScheduleResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobcron_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jobcron_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jobcron_proto_goTypes,
		DependencyIndexes: file_jobcron_proto_depIdxs,
		MessageInfos:      file_jobcron_proto_msgTypes,
	}.Build()
	File_jobcron_proto = out.File
	file_jobcron_proto_rawDesc = nil
	file_jobcron_proto_goTypes = nil
	file_jobcron_proto_depIdxs = nil
}
