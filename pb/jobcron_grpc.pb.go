// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: jobcron.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobCronClient is the client API for JobCron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobCronClient interface {
	// -----------------------job_record-----------------------
	CreateJobRecord(ctx context.Context, in *CreateJobRecordReq, opts ...grpc.CallOption) (*CreateJobRecordResp, error)
	UpdateJobRecord(ctx context.Context, in *UpdateJobRecordReq, opts ...grpc.CallOption) (*UpdateJobRecordResp, error)
	DeleteJobRecord(ctx context.Context, in *DeleteJobRecordReq, opts ...grpc.CallOption) (*DeleteJobRecordResp, error)
	DetailJobRecord(ctx context.Context, in *DetailJobRecordReq, opts ...grpc.CallOption) (*DetailJobRecordResp, error)
	PageJobRecord(ctx context.Context, in *SearchJobRecordReq, opts ...grpc.CallOption) (*SearchJobRecordResp, error)
	// -----------------------job_schedule-----------------------
	CreateJobSchedule(ctx context.Context, in *CreateJobScheduleReq, opts ...grpc.CallOption) (*CreateJobScheduleResp, error)
	UpdateJobSchedule(ctx context.Context, in *UpdateJobScheduleReq, opts ...grpc.CallOption) (*UpdateJobScheduleResp, error)
	DeleteJobSchedule(ctx context.Context, in *DeleteJobScheduleReq, opts ...grpc.CallOption) (*DeleteJobScheduleResp, error)
	DetailJobSchedule(ctx context.Context, in *DetailJobScheduleReq, opts ...grpc.CallOption) (*DetailJobScheduleResp, error)
	PageJobSchedule(ctx context.Context, in *SearchJobScheduleReq, opts ...grpc.CallOption) (*SearchJobScheduleResp, error)
	// 补偿任务，立即执行该key对应的任务
	JobCompensate(ctx context.Context, in *JobCompensateReq, opts ...grpc.CallOption) (*JobCompensateResp, error)
	// 强制重启job
	ForceRestartJob(ctx context.Context, in *ForceRestartJobReq, opts ...grpc.CallOption) (*ForceRestartJobResp, error)
	// 操作Schedule对象，包括restart、stop、start调度
	OperaSchedule(ctx context.Context, in *OperaScheduleReq, opts ...grpc.CallOption) (*OperaScheduleResp, error)
	// 操作Schedule对象，包括restart、stop、start调度
	GetScheduleStatus(ctx context.Context, in *ScheduleStatusReq, opts ...grpc.CallOption) (*ScheduleStatusResp, error)
}

type jobCronClient struct {
	cc grpc.ClientConnInterface
}

func NewJobCronClient(cc grpc.ClientConnInterface) JobCronClient {
	return &jobCronClient{cc}
}

func (c *jobCronClient) CreateJobRecord(ctx context.Context, in *CreateJobRecordReq, opts ...grpc.CallOption) (*CreateJobRecordResp, error) {
	out := new(CreateJobRecordResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/CreateJobRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) UpdateJobRecord(ctx context.Context, in *UpdateJobRecordReq, opts ...grpc.CallOption) (*UpdateJobRecordResp, error) {
	out := new(UpdateJobRecordResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/UpdateJobRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) DeleteJobRecord(ctx context.Context, in *DeleteJobRecordReq, opts ...grpc.CallOption) (*DeleteJobRecordResp, error) {
	out := new(DeleteJobRecordResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/DeleteJobRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) DetailJobRecord(ctx context.Context, in *DetailJobRecordReq, opts ...grpc.CallOption) (*DetailJobRecordResp, error) {
	out := new(DetailJobRecordResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/DetailJobRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) PageJobRecord(ctx context.Context, in *SearchJobRecordReq, opts ...grpc.CallOption) (*SearchJobRecordResp, error) {
	out := new(SearchJobRecordResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/PageJobRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) CreateJobSchedule(ctx context.Context, in *CreateJobScheduleReq, opts ...grpc.CallOption) (*CreateJobScheduleResp, error) {
	out := new(CreateJobScheduleResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/CreateJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) UpdateJobSchedule(ctx context.Context, in *UpdateJobScheduleReq, opts ...grpc.CallOption) (*UpdateJobScheduleResp, error) {
	out := new(UpdateJobScheduleResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/UpdateJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) DeleteJobSchedule(ctx context.Context, in *DeleteJobScheduleReq, opts ...grpc.CallOption) (*DeleteJobScheduleResp, error) {
	out := new(DeleteJobScheduleResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/DeleteJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) DetailJobSchedule(ctx context.Context, in *DetailJobScheduleReq, opts ...grpc.CallOption) (*DetailJobScheduleResp, error) {
	out := new(DetailJobScheduleResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/DetailJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) PageJobSchedule(ctx context.Context, in *SearchJobScheduleReq, opts ...grpc.CallOption) (*SearchJobScheduleResp, error) {
	out := new(SearchJobScheduleResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/PageJobSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) JobCompensate(ctx context.Context, in *JobCompensateReq, opts ...grpc.CallOption) (*JobCompensateResp, error) {
	out := new(JobCompensateResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/JobCompensate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) ForceRestartJob(ctx context.Context, in *ForceRestartJobReq, opts ...grpc.CallOption) (*ForceRestartJobResp, error) {
	out := new(ForceRestartJobResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/ForceRestartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) OperaSchedule(ctx context.Context, in *OperaScheduleReq, opts ...grpc.CallOption) (*OperaScheduleResp, error) {
	out := new(OperaScheduleResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/OperaSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobCronClient) GetScheduleStatus(ctx context.Context, in *ScheduleStatusReq, opts ...grpc.CallOption) (*ScheduleStatusResp, error) {
	out := new(ScheduleStatusResp)
	err := c.cc.Invoke(ctx, "/jobcron.JobCron/GetScheduleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobCronServer is the server API for JobCron service.
// All implementations must embed UnimplementedJobCronServer
// for forward compatibility
type JobCronServer interface {
	// -----------------------job_record-----------------------
	CreateJobRecord(context.Context, *CreateJobRecordReq) (*CreateJobRecordResp, error)
	UpdateJobRecord(context.Context, *UpdateJobRecordReq) (*UpdateJobRecordResp, error)
	DeleteJobRecord(context.Context, *DeleteJobRecordReq) (*DeleteJobRecordResp, error)
	DetailJobRecord(context.Context, *DetailJobRecordReq) (*DetailJobRecordResp, error)
	PageJobRecord(context.Context, *SearchJobRecordReq) (*SearchJobRecordResp, error)
	// -----------------------job_schedule-----------------------
	CreateJobSchedule(context.Context, *CreateJobScheduleReq) (*CreateJobScheduleResp, error)
	UpdateJobSchedule(context.Context, *UpdateJobScheduleReq) (*UpdateJobScheduleResp, error)
	DeleteJobSchedule(context.Context, *DeleteJobScheduleReq) (*DeleteJobScheduleResp, error)
	DetailJobSchedule(context.Context, *DetailJobScheduleReq) (*DetailJobScheduleResp, error)
	PageJobSchedule(context.Context, *SearchJobScheduleReq) (*SearchJobScheduleResp, error)
	// 补偿任务，立即执行该key对应的任务
	JobCompensate(context.Context, *JobCompensateReq) (*JobCompensateResp, error)
	// 强制重启job
	ForceRestartJob(context.Context, *ForceRestartJobReq) (*ForceRestartJobResp, error)
	// 操作Schedule对象，包括restart、stop、start调度
	OperaSchedule(context.Context, *OperaScheduleReq) (*OperaScheduleResp, error)
	// 操作Schedule对象，包括restart、stop、start调度
	GetScheduleStatus(context.Context, *ScheduleStatusReq) (*ScheduleStatusResp, error)
	mustEmbedUnimplementedJobCronServer()
}

// UnimplementedJobCronServer must be embedded to have forward compatible implementations.
type UnimplementedJobCronServer struct {
}

func (UnimplementedJobCronServer) CreateJobRecord(context.Context, *CreateJobRecordReq) (*CreateJobRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobRecord not implemented")
}
func (UnimplementedJobCronServer) UpdateJobRecord(context.Context, *UpdateJobRecordReq) (*UpdateJobRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobRecord not implemented")
}
func (UnimplementedJobCronServer) DeleteJobRecord(context.Context, *DeleteJobRecordReq) (*DeleteJobRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobRecord not implemented")
}
func (UnimplementedJobCronServer) DetailJobRecord(context.Context, *DetailJobRecordReq) (*DetailJobRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailJobRecord not implemented")
}
func (UnimplementedJobCronServer) PageJobRecord(context.Context, *SearchJobRecordReq) (*SearchJobRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageJobRecord not implemented")
}
func (UnimplementedJobCronServer) CreateJobSchedule(context.Context, *CreateJobScheduleReq) (*CreateJobScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobSchedule not implemented")
}
func (UnimplementedJobCronServer) UpdateJobSchedule(context.Context, *UpdateJobScheduleReq) (*UpdateJobScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobSchedule not implemented")
}
func (UnimplementedJobCronServer) DeleteJobSchedule(context.Context, *DeleteJobScheduleReq) (*DeleteJobScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobSchedule not implemented")
}
func (UnimplementedJobCronServer) DetailJobSchedule(context.Context, *DetailJobScheduleReq) (*DetailJobScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailJobSchedule not implemented")
}
func (UnimplementedJobCronServer) PageJobSchedule(context.Context, *SearchJobScheduleReq) (*SearchJobScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageJobSchedule not implemented")
}
func (UnimplementedJobCronServer) JobCompensate(context.Context, *JobCompensateReq) (*JobCompensateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobCompensate not implemented")
}
func (UnimplementedJobCronServer) ForceRestartJob(context.Context, *ForceRestartJobReq) (*ForceRestartJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceRestartJob not implemented")
}
func (UnimplementedJobCronServer) OperaSchedule(context.Context, *OperaScheduleReq) (*OperaScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperaSchedule not implemented")
}
func (UnimplementedJobCronServer) GetScheduleStatus(context.Context, *ScheduleStatusReq) (*ScheduleStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleStatus not implemented")
}
func (UnimplementedJobCronServer) mustEmbedUnimplementedJobCronServer() {}

// UnsafeJobCronServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobCronServer will
// result in compilation errors.
type UnsafeJobCronServer interface {
	mustEmbedUnimplementedJobCronServer()
}

func RegisterJobCronServer(s grpc.ServiceRegistrar, srv JobCronServer) {
	s.RegisterService(&JobCron_ServiceDesc, srv)
}

func _JobCron_CreateJobRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).CreateJobRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/CreateJobRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).CreateJobRecord(ctx, req.(*CreateJobRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_UpdateJobRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).UpdateJobRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/UpdateJobRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).UpdateJobRecord(ctx, req.(*UpdateJobRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_DeleteJobRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).DeleteJobRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/DeleteJobRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).DeleteJobRecord(ctx, req.(*DeleteJobRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_DetailJobRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailJobRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).DetailJobRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/DetailJobRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).DetailJobRecord(ctx, req.(*DetailJobRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_PageJobRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchJobRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).PageJobRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/PageJobRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).PageJobRecord(ctx, req.(*SearchJobRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_CreateJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).CreateJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/CreateJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).CreateJobSchedule(ctx, req.(*CreateJobScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_UpdateJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).UpdateJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/UpdateJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).UpdateJobSchedule(ctx, req.(*UpdateJobScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_DeleteJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).DeleteJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/DeleteJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).DeleteJobSchedule(ctx, req.(*DeleteJobScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_DetailJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailJobScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).DetailJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/DetailJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).DetailJobSchedule(ctx, req.(*DetailJobScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_PageJobSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchJobScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).PageJobSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/PageJobSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).PageJobSchedule(ctx, req.(*SearchJobScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_JobCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCompensateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).JobCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/JobCompensate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).JobCompensate(ctx, req.(*JobCompensateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_ForceRestartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceRestartJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).ForceRestartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/ForceRestartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).ForceRestartJob(ctx, req.(*ForceRestartJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_OperaSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperaScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).OperaSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/OperaSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).OperaSchedule(ctx, req.(*OperaScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobCron_GetScheduleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCronServer).GetScheduleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobcron.JobCron/GetScheduleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCronServer).GetScheduleStatus(ctx, req.(*ScheduleStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JobCron_ServiceDesc is the grpc.ServiceDesc for JobCron service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobCron_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobcron.JobCron",
	HandlerType: (*JobCronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJobRecord",
			Handler:    _JobCron_CreateJobRecord_Handler,
		},
		{
			MethodName: "UpdateJobRecord",
			Handler:    _JobCron_UpdateJobRecord_Handler,
		},
		{
			MethodName: "DeleteJobRecord",
			Handler:    _JobCron_DeleteJobRecord_Handler,
		},
		{
			MethodName: "DetailJobRecord",
			Handler:    _JobCron_DetailJobRecord_Handler,
		},
		{
			MethodName: "PageJobRecord",
			Handler:    _JobCron_PageJobRecord_Handler,
		},
		{
			MethodName: "CreateJobSchedule",
			Handler:    _JobCron_CreateJobSchedule_Handler,
		},
		{
			MethodName: "UpdateJobSchedule",
			Handler:    _JobCron_UpdateJobSchedule_Handler,
		},
		{
			MethodName: "DeleteJobSchedule",
			Handler:    _JobCron_DeleteJobSchedule_Handler,
		},
		{
			MethodName: "DetailJobSchedule",
			Handler:    _JobCron_DetailJobSchedule_Handler,
		},
		{
			MethodName: "PageJobSchedule",
			Handler:    _JobCron_PageJobSchedule_Handler,
		},
		{
			MethodName: "JobCompensate",
			Handler:    _JobCron_JobCompensate_Handler,
		},
		{
			MethodName: "ForceRestartJob",
			Handler:    _JobCron_ForceRestartJob_Handler,
		},
		{
			MethodName: "OperaSchedule",
			Handler:    _JobCron_OperaSchedule_Handler,
		},
		{
			MethodName: "GetScheduleStatus",
			Handler:    _JobCron_GetScheduleStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jobcron.proto",
}
